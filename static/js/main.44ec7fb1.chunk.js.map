{"version":3,"sources":["MovieModule/MovieList.js","MovieModule/MovieDetails.js","routes/public.js","App.js","serviceWorker.js","index.js"],"names":["MovieList","history","useHistory","location","useLocation","React","useState","data","loading","setMovieList","CurrentPageNumber","setCurrentPageNumber","SearchString","setSearchString","console","log","useEffect","state","search","window","localStorage","getItem","FetchMovieData","a","length","fetch","responseData","json","Response","dataList","Search","dataListWithKey","map","val","index","newItem","key","imdbID","Poster","Title","Type","Year","push","setItem","style","width","display","float","paddingBottom","placeholder","enterButton","size","onSearch","value","searchMovie","onRow","r","onClick","pathname","title","onFetch","loadingIndicator","textAlign","paddingTop","border","tip","columns","dataIndex","scroll","y","dataSource","bordered","debug","MovieDetails","movieDetail","setMovieDetails","FetchMovieDetails","type","Item","label","Actors","Awards","BoxOffice","Country","DVD","Director","Genre","Language","Metascore","Plot","Production","Rated","Released","Runtime","Public","exact","path","to","Header","Layout","Content","Footer","App","className","theme","mode","defaultSelectedKeys","padding","margin","Boolean","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.44ec7fb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport { InfinityTable as Table } from 'antd-table-infinity';\r\nimport Search from 'antd/lib/input/Search';\r\nimport { useHistory,useLocation } from 'react-router-dom'\r\n\r\nconst MovieList =()=> {\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [MovieList, setMovieList]=React.useState({\r\n    data: [],\r\n    loading: false,\r\n  })\r\n  const [CurrentPageNumber, setCurrentPageNumber] = React.useState(1);\r\n  const [SearchString, setSearchString] = React.useState(\"\");\r\n  console.log(location,\"hit\")\r\n  React.useEffect(() => {\r\n    if(location?.state?.search){\r\n      setSearchString(location.state.search)\r\n    }\r\n    if(window.localStorage.getItem(\"search\")){\r\n      console.log(window.localStorage.getItem(\"search\"))\r\n      setSearchString(window.localStorage.getItem(\"search\"))\r\n    }\r\n  },[location])\r\n\r\n  React.useEffect(()=>{\r\n    FetchMovieData();\r\n  },[SearchString])\r\n\r\n  const columns = [\r\n    {\r\n      title: 'imdbID',\r\n      width: 50,\r\n      dataIndex: 'imdbID',\r\n    },\r\n    {\r\n      title: 'Title',\r\n      width: 50,\r\n      dataIndex: 'Title',\r\n    },\r\n    {\r\n      title: 'Type',\r\n      width: 50,\r\n      dataIndex: 'Type',\r\n    },\r\n    {\r\n      title: 'Year',\r\n      width: 50,\r\n      dataIndex: 'Year',\r\n    },\r\n    {\r\n      title: 'Poster',\r\n      dataIndex: 'Poster',\r\n      width: 100,\r\n    }\r\n  ];\r\n  \r\n async function FetchMovieData () { \r\n    if(SearchString.length > 0){\r\n      setMovieList({    \r\n        ...MovieList,\r\n        loading: true });\r\n      const responseData = await fetch(`https://www.omdbapi.com/?apikey=9b3b1559&s=${SearchString}&type=movie&page=${CurrentPageNumber}`);\r\n      const data = await responseData.json();\r\n      if(data.Response !== \"False\")\r\n      {\r\n        let dataList = data.Search;\r\n        let dataListWithKey = MovieList.data;\r\n        if(dataList.length > 0){\r\n          dataList.map((val, index) => {\r\n            let newItem =  {\r\n              key: val.imdbID,\r\n              index: index,\r\n              Poster: val.Poster,\r\n              Title: val.Title,\r\n              Type: val.Type,\r\n              Year: val.Year,\r\n              imdbID: val.imdbID\r\n            };\r\n          \r\n            dataListWithKey.push(newItem);\r\n          });\r\n          setMovieList({\r\n            ...MovieList,\r\n            data: dataListWithKey\r\n          });\r\n          setCurrentPageNumber(CurrentPageNumber+1);\r\n        }\r\n      }\r\n      setMovieList({\r\n        ...MovieList,\r\n        loading : false\r\n      }); \r\n      window.localStorage.setItem(\"search\", SearchString)\r\n    }\r\n  }\r\n  function searchMovie(value){\r\n    setSearchString(value);\r\n    setCurrentPageNumber(1);\r\n    // console.log(SearchString)\r\n  }\r\n\r\n  const loadMoreContent = () => (\r\n    <div\r\n      style={{\r\n        textAlign: 'center',\r\n        paddingTop: 40,\r\n        paddingBottom: 40,\r\n        border: '1px solid #e8e8e8',\r\n      }}\r\n    >\r\n      <Spin tip=\"Loading...\" />\r\n    </div>\r\n  )\r\n    return (\r\n      <div>\r\n        <div>\r\n        <Search\r\n          style={{\r\n            width: '20vw',\r\n            display: 'flex',\r\n            float: 'right',\r\n            paddingBottom: '20px'\r\n          }}\r\n          placeholder=\"search movies\"\r\n          enterButton=\"Search\"\r\n          size=\"large\"\r\n          onSearch={value => {searchMovie(value) \r\n            setMovieList({\r\n              data: [],\r\n              loading: false,\r\n            })\r\n          }}\r\n        />\r\n        </div>\r\n        <Table\r\n        onRow={(r) => ({\r\n          onClick: () => {\r\n          history.push({\r\n            pathname: `/Movie-detail`,\r\n            state: {\r\n              title:  r.Title,\r\n              search: SearchString\r\n            },\r\n          })\r\n        }\r\n          ,\r\n        })}\r\n        key=\"key\"\r\n        loading={MovieList.loading}\r\n        onFetch={FetchMovieData}\r\n        loadingIndicator={loadMoreContent()}\r\n        columns={columns}\r\n        scroll={{ y: 450 }}\r\n        dataSource={MovieList.data}\r\n        bordered\r\n        debug\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default MovieList","import React from 'react'\r\nimport { Button, Descriptions, Badge } from 'antd'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\n\r\nconst MovieDetails = () => {\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    const [movieDetail, setMovieDetails] = React.useState()\r\n    // console.log(location, \"hit\")\r\n    // console.log(movieDetail, \"state\")\r\n    React.useEffect(() => {\r\n\r\n        if (location.state.title) {\r\n            FetchMovieDetails(location.state.title);\r\n        }\r\n    }, [])\r\n    async function FetchMovieDetails(title) {\r\n        const responseData = await fetch(`https://www.omdbapi.com?apikey=9b3b1559&t=${title}`);\r\n        const data = await responseData.json();\r\n        setMovieDetails(data)\r\n        // console.log(data)\r\n    }\r\n    return (\r\n        <div>\r\n            {movieDetail && (\r\n                <div>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => {\r\n                            history.push({\r\n                                pathname:'/Movie-list',\r\n                                state:{\r\n                                    title: location.state.title,\r\n                                    search:location.state.search\r\n                                }\r\n                            })\r\n                        }}\r\n                    >Go back</Button>\r\n                    <div>\r\n                    <Descriptions title=\"Movie Info\" bordered>\r\n                    <Descriptions.Item label=\"Title\">{movieDetail.Title}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Actors\">{movieDetail.Actors}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Awards\">{movieDetail.Awards}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"BoxOffice\">{movieDetail.BoxOffice}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Country\" >{movieDetail.Country}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"DVD\" >{movieDetail.DVD}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Director\">{movieDetail.Director}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Genre\">{movieDetail.Genre}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Language\">{movieDetail.Language}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Metascore\">{movieDetail.Metascore}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Plot\">{movieDetail.Plot}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Poster\">{movieDetail.Poster}</Descriptions.Item>  \r\n                    <Descriptions.Item label=\"Production\">{movieDetail.Production}</Descriptions.Item>         \r\n                    <Descriptions.Item label=\"Rated\">{movieDetail.Rated}</Descriptions.Item>  \r\n                    <Descriptions.Item label=\"Released\">{movieDetail.Released}</Descriptions.Item>  \r\n                    <Descriptions.Item label=\"Runtime\">{movieDetail.Runtime}</Descriptions.Item>  \r\n                    </Descriptions>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieDetails","import React from 'react'\r\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom'\r\nimport MovieDetails from '../MovieModule/MovieDetails'\r\nimport MovieList from '../MovieModule/MovieList'\r\n\r\n\r\nconst Public = () =>(\r\n    \r\n        <Switch>\r\n             <Route exact path=\"/MovieV1/\">\r\n                <Redirect to={`/Movie-list`}></Redirect>\r\n            </Route>\r\n            <Route exact path=\"/Movie-list\">\r\n                <MovieList />\r\n            </Route>\r\n            <Route exact path=\"/Movie-detail\">\r\n                <MovieDetails />\r\n            </Route>\r\n            </Switch>\r\n    \r\n)\r\n\r\nexport default Public","import React from 'react';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport MovieList from './MovieModule/MovieList';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport Public from './routes/public';\r\n\r\nconst { Header, Content, Footer } = Layout\r\n\r\n\r\nconst App = () =>(\r\n  <Layout className=\"layout\">\r\n  <Header>\r\n    <div className=\"logo\" />\r\n    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n      <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n      <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n      <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n    </Menu>\r\n  </Header>\r\n  <Content style={{ padding: '0 50px' }}>\r\n    <Breadcrumb style={{ margin: '16px 0' }}>\r\n      <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n      <Breadcrumb.Item>List</Breadcrumb.Item>\r\n      <Breadcrumb.Item>App</Breadcrumb.Item>\r\n    </Breadcrumb>\r\n    <div className=\"site-layout-content\">\r\n      <Router>\r\n      <Public />\r\n      </Router>\r\n    </div>\r\n  </Content>\r\n  <Footer style={{ textAlign: 'center' }}>Movie List</Footer>\r\n</Layout>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}